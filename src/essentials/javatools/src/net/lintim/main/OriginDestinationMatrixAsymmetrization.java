package net.lintim.main;

import net.lintim.csv.ConfigurationCSV;
import net.lintim.csv.OriginDestinationMatrixCSV;
import net.lintim.csv.PublicTransportationNetworkCSV;
import net.lintim.exception.DataInconsistentException;
import net.lintim.model.Configuration;
import net.lintim.model.OriginDestinationMatrix;
import net.lintim.model.PublicTransportationNetwork;

import java.io.File;
import java.io.IOException;

/**
 * Asymmetrizes an origin destination matrix by simply writing the full matrix
 * to file.
 *
 */
public class OriginDestinationMatrixAsymmetrization {

    public static void main(String[] args){

        if(args.length != 1){
            System.err.println("Error: number of arguments invalid; first " +
                    "argument must be the path to the configuration file.");
            System.exit(1);
        }

        try {
            // -----------------------------------------------------------------
            // --- Load Configuration ------------------------------------------
            // -----------------------------------------------------------------
            File configFile = new File(args[0]);

            System.err.print("Loading Configuration... ");
            Configuration config = new Configuration();
            ConfigurationCSV.fromFile(config, configFile);
            System.err.println("done!");

            // -----------------------------------------------------------------
            // --- Load State --------------------------------------------------
            // -----------------------------------------------------------------
            File stateFile = new File(config.getStringValue("filename_state_config"));
            Configuration state = new Configuration();

            if(stateFile.exists()){
                System.err.print("Loading State... ");
                ConfigurationCSV.fromFile(state, stateFile);
                System.err.println("done!");
            }

            // -----------------------------------------------------------------
            // --- Load Public Transportation Network --------------------------
            // -----------------------------------------------------------------
            File stationsFile =
                new File(config.getStringValue("default_stops_file"));
            File linksFile =
                new File(config.getStringValue("default_edges_file"));

            System.err.print("Loading Public Transportation Network... ");
            PublicTransportationNetwork ptn =
                new PublicTransportationNetwork(config);
            PublicTransportationNetworkCSV.fromFile(ptn, stationsFile,
                    linksFile);
            System.err.println("done!");
            // -----------------------------------------------------------------
            // --- Load Origin Destination Matrix ------------------------------
            // -----------------------------------------------------------------
            File odFile = new File(config.getStringValue("default_od_file"));

            System.err.print("Loading Origin Destination Matrix... ");
            OriginDestinationMatrix od = new OriginDestinationMatrix(ptn);
            OriginDestinationMatrixCSV.fromFile(od, odFile, true);
            System.err.println("done!");

            // -----------------------------------------------------------------
            // --- Directify ---------------------------------------------------
            // -----------------------------------------------------------------

            System.err.print("Saving asymetric Origin Destination Matrix...");
            OriginDestinationMatrixCSV.toFile(od, odFile);
            System.err.println(" done!");

            // -----------------------------------------------------------------
            // --- Save State --------------------------------------------------
            // -----------------------------------------------------------------
            System.err.print("Saving State Configuration... ");
            ConfigurationCSV.toFile(state, stateFile,
                    "This file is automatically generated. Do not edit!");
            System.err.println("done!");

        } catch (IOException e) {
            System.err.println();
            System.err.println("An error occured. See stacktrace below.");
            e.printStackTrace();
            System.exit(1);
        } catch (DataInconsistentException e) {
            System.err.println();
            System.err.println("An error occured. See stacktrace below.");
            e.printStackTrace();
            System.exit(1);
        }

    }

}
