model "mdm1.mos"
	uses "mmxprs"

	parameters
	DATAFILE='../../src/vehicle-scheduling/canal-model/data_mdm1'
	default_vehicle_schedules_file="vehicle-scheduling/Transfers.vs"
	verbose=false
	end-parameters

	include '../../src/vehicle-scheduling/canal-model/print_status.mos'

	! Declare the Variables:
	declarations
	NumberOfTrips: integer
	timelimit: integer
	threads: integer
	mipGap: real
	outputMessages: boolean
	writeLpFile: boolean
	end-declarations

	! Import the NumberOfTrips
	initializations from DATAFILE
		NumberOfTrips
		timelimit
        threads
        mipGap
		outputMessages
		writeLpFile
	end-initializations

	declarations
	Indizes=0..NumberOfTrips
	! Costs of the program:
	C: array(Indizes, Indizes) of real
	! Decision Variables: Could one have matrices as decision variables?
	x: array(Indizes, Indizes) of mpvar
	end-declarations

	! Import the Cost-Matrix
	initializations from DATAFILE
		C
	end-initializations

	! Objective Function (describes the number of not used vehicles), which is to be maximized:
	NumberOfUnusedVehicles:= sum(i in Indizes, j in Indizes) C(i,j) * x(i,j);

	! Define the constraints:
	forall (i in Indizes  | i > 0 ) do
		sum(j in Indizes) x(i,j) <= 1;
		sum(j in Indizes) x(i,j) >= 1;
	end-do

	forall (j in Indizes | j > 0)  do
		sum(i in Indizes) x(i,j) <= 1;
		sum(i in Indizes) x(i,j) >= 1;
	end-do

	sum(j in Indizes) x(0,j) <= NumberOfTrips;
	sum(j in Indizes) x(0,j) >= NumberOfTrips;

	sum(i in Indizes) x(i,0) <= NumberOfTrips;
	sum(i in Indizes) x(i,0) >= NumberOfTrips;

	forall(i in Indizes, j in Indizes) do
		x(i,j) is_integer;
		x(i,j) >= 0;
	end-do

    ! Set solver parameters
    if timelimit > 0 then
        setparam("XPRS_MAXTIME", timelimit);
    end-if
    if threads > 0 then
        setparam("XPRS_THREADS", threads);
    end-if
    if outputMessages then
        setparam("XPRS_VERBOSE", true)
    else
        setparam("XPRS_VERBOSE", false)
    end-if
    if mipGap > 0 then
        setparam("XPRS_MIPRELSTOP", mipGap)
    end-if
    if writeLpFile then
        exportprob("am.lp")
    end-if

	! Maximization:
	maximize(NumberOfUnusedVehicles);

	! Problem solved?
!	print_status

	! Write the results:
!	forall(i in Indizes, j in Indizes) writeln(" x(", i, ",", j, ") = ", getsol(x(i,j)))
!	writeln("Value of objective function (number of not used vehicles) = ", getobjval)

	!Final output:
	fopen(default_vehicle_schedules_file, F_OUTPUT)
	writeln("# Used model : MDM1 (Minimal decomposition model 1)")
	writeln("# Value of objective function (not needed vehicles): ", getobjval)
	writeln("# Number of needed vehicles (= number of trips - value of objective function): ", (NumberOfTrips - getobjval))
	write("# ")
	print_status
	writeln("# transfers: first-trip (id) ; second-trip (id) -------- id = 0 stands for the depot")
	forall(i in Indizes) do
		forall(j in Indizes | getsol(x(i,j)) = 1) do
			if (i <> j and i <> 0 and j<>0) then writeln(i, " ; ", j)
			elif (i <> j) then writeln(i, " ; ", j)
			end-if
		end-do
	end-do
	fclose(F_OUTPUT)

end-model
