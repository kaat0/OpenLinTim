package net.lintim.fileHandler;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

public class ConfigFile extends File {

	private static final long serialVersionUID = 1L;

	public ConfigFile(String pathname) {
		super(pathname);
		try {
			if(!this.exists()){
				this.createNewFile();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void writeParameter(String parameter, String value) {
		try {
			BufferedReader in = new BufferedReader(new FileReader(this));
			this.delete();
			this.createNewFile();
			BufferedWriter out = new BufferedWriter(new FileWriter(this, true));
			if(this.getPath().endsWith("State-Config.cnf")){
				out.write("# This file is automatically generated. Do not edit!\n");
			}
			out.write("# setting-name; setting-value\n");
			String line;
			boolean parameterOverwritten = false;
			while ((line = in.readLine()) != null) {
				if (!line.startsWith("#") && !line.trim().isEmpty() && line.startsWith(parameter)) {
					out.write(parameter + "; " + value + "\n");
					parameterOverwritten = true;
				} else if(!line.startsWith("#") && !line.trim().isEmpty()) {
					out.write(line + "\n");
				}
			}
			if (!parameterOverwritten) {
				out.write(parameter + "; " + value + "\n");
			}
			out.close();
			in.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	public void unsetParameter(String parameter) {
		try {
			BufferedReader in = new BufferedReader(new FileReader(this));
			this.delete();
			this.createNewFile();
			BufferedWriter out = new BufferedWriter(new FileWriter(this, true));
			out.write("# setting-name; setting-value\n");
			String line;
			while ((line = in.readLine()) != null) {
				if (!line.startsWith("#") && !line.trim().isEmpty() && !line.startsWith(parameter)) {
					out.write(line + "\n");
				}
			}
			out.close();
			in.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public HashMap<String, String> appendConfigFile(HashMap<String, String> mapOfParameter) {
		try {
			if (this.exists()) {
				String line;
				String[] lineArray;
				BufferedReader in = new BufferedReader(new FileReader(this));
				while ((line = in.readLine()) != null) {
					if (!line.startsWith("#") && !line.trim().isEmpty()) {
						lineArray = line.split(";");
						mapOfParameter.put(lineArray[0].trim(), lineArray[1].trim());
					}
				}
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return mapOfParameter;
	}

}
